diff --git a/src/api/githubAPI.tsx b/src/api/githubAPI.tsx
index 4f1b74f..64f9320 100644
--- a/src/api/githubAPI.tsx
+++ b/src/api/githubAPI.tsx
@@ -1,5 +1,7 @@
-import axios from 'axios'
+import { ajax } from 'rxjs/ajax'
 import parseLink, { Links } from 'parse-link-header'
+import { map, pluck } from 'rxjs/operators'
+import { Observable } from 'rxjs'
 
 export interface Label {
   id: number
@@ -64,47 +66,40 @@ const getPageCount = (pageLinks: Links) => {
   }
 }
 
-export async function getIssues(
+export function getIssues(
   org: string,
   repo: string,
   page = 1
-): Promise<IssuesResult> {
+): Observable<IssuesResult> {
   const url = `https://api.github.com/repos/${org}/${repo}/issues?per_page=25&page=${page}`
-
-  try {
-    const issuesResponse = await axios.get<Issue[]>(url)
-    let pageCount = 0
-    const pageLinks = parseLink(issuesResponse.headers.link)
-
-    if (pageLinks !== null) {
-      pageCount = getPageCount(pageLinks)
-    }
-
-    return {
-      pageLinks,
-      pageCount,
-      issues: issuesResponse.data
-    }
-  } catch (err) {
-    throw err
-  }
+  return ajax.get(url).pipe(
+    map((r) => {
+      let pageCount = 0
+      const pageLinks = parseLink(r.xhr.getResponseHeader('link') as string)
+
+      if (pageLinks !== null) {
+        pageCount = getPageCount(pageLinks)
+      }
+
+      return {
+        pageLinks,
+        pageCount,
+        issues: r.response as Issue[],
+      }
+    })
+  )
 }
 
-export async function getRepoDetails(org: string, repo: string) {
+export function getRepoOpenIssuesCount(org: string, repo: string) {
   const url = `https://api.github.com/repos/${org}/${repo}`
-
-  const { data } = await axios.get<RepoDetails>(url)
-  return data
+  return ajax.getJSON<RepoDetails>(url).pipe(pluck('open_issues_count'))
 }
 
-export async function getIssue(org: string, repo: string, number: number) {
+export function getIssue(org: string, repo: string, number: number) {
   const url = `https://api.github.com/repos/${org}/${repo}/issues/${number}`
-
-  const { data } = await axios.get<Issue>(url)
-  return data
+  return ajax.getJSON<Issue>(url)
 }
 
-export async function getComments(url: string) {
-  const { data } = await axios.get<Comment[]>(url)
-  return data
+export function getComments(url: string) {
+  return ajax.getJSON<Comment[]>(url)
 }
diff --git a/src/app/App.tsx b/src/app/App.tsx
index fd844a7..e97bdbf 100644
--- a/src/app/App.tsx
+++ b/src/app/App.tsx
@@ -1,82 +1,33 @@
-import React, { useState } from 'react'
-import './App.css'
+import React, { Suspense, lazy } from 'react'
 
+import './App.css'
 import { RepoSearchForm } from 'features/repoSearch/RepoSearchForm'
 import { IssuesListPage } from 'features/issuesList/IssuesListPage'
-import { IssueDetailsPage } from 'features/issueDetails/IssueDetailsPage'
-
-const ORG = 'rails'
-const REPO = 'rails'
-
-type CurrentDisplay =
-  | {
-      type: 'issues'
-    }
-  | {
-      type: 'comments'
-      issueId: number
-    }
+import { useSelectedIssueId } from 'state'
+
+const IssueDetailsPage = lazy(() =>
+  import('features/issueDetails/IssueDetailsPage')
+)
+
+const List: React.FC = () => {
+  const id = useSelectedIssueId()
+  return id !== null ? null : (
+    <>
+      <RepoSearchForm />
+      <IssuesListPage />
+    </>
+  )
+}
 
 const App: React.FC = () => {
-  const [org, setOrg] = useState(ORG)
-  const [repo, setRepo] = useState(REPO)
-  const [page, setPage] = useState(1)
-  const [currentDisplay, setCurrentDisplay] = useState<CurrentDisplay>({
-    type: 'issues'
-  })
-
-  const setOrgAndRepo = (org: string, repo: string) => {
-    setOrg(org)
-    setRepo(repo)
-  }
-
-  const setJumpToPage = (page: number) => {
-    setPage(page)
-  }
-
-  const showIssuesList = () => {
-    setCurrentDisplay({ type: 'issues' })
-  }
-
-  const showIssueComments = (issueId: number) => {
-    setCurrentDisplay({ type: 'comments', issueId })
-  }
-
-  let content
-
-  if (currentDisplay.type === 'issues') {
-    content = (
-      <React.Fragment>
-        <RepoSearchForm
-          org={org}
-          repo={repo}
-          setOrgAndRepo={setOrgAndRepo}
-          setJumpToPage={setJumpToPage}
-        />
-        <IssuesListPage
-          org={org}
-          repo={repo}
-          page={page}
-          setJumpToPage={setJumpToPage}
-          showIssueComments={showIssueComments}
-        />
-      </React.Fragment>
-    )
-  } else {
-    const { issueId } = currentDisplay
-    const key = `${org}/${repo}/${issueId}`
-    content = (
-      <IssueDetailsPage
-        key={key}
-        org={org}
-        repo={repo}
-        issueId={issueId}
-        showIssuesList={showIssuesList}
-      />
-    )
-  }
-
-  return <div className="App">{content}</div>
+  return (
+    <div className="App">
+      <List />
+      <Suspense fallback={null}>
+        <IssueDetailsPage />
+      </Suspense>
+    </div>
+  )
 }
 
 export default App
diff --git a/src/components/IssueLabels.tsx b/src/components/IssueLabels.tsx
index 89bbea6..6687dab 100644
--- a/src/components/IssueLabels.tsx
+++ b/src/components/IssueLabels.tsx
@@ -10,13 +10,13 @@ interface IssueLabelsProps {
 
 export const IssueLabels = ({ labels, className }: IssueLabelsProps) => (
   <div className={classnames('issue__labels', className)}>
-    {labels.map(label => (
+    {labels.map((label) => (
       <span
         key={label.id}
         className="issue__label"
         style={{
           boxShadow: `0 0 2px #${label.color}`,
-          borderColor: `#${label.color}`
+          borderColor: `#${label.color}`,
         }}
       >
         {label.name}
diff --git a/src/components/UserWithAvatar.tsx b/src/components/UserWithAvatar.tsx
index 1796ddc..5c091cc 100644
--- a/src/components/UserWithAvatar.tsx
+++ b/src/components/UserWithAvatar.tsx
@@ -15,11 +15,11 @@ export const UserWithAvatar = ({
   user,
   orientation = 'vertical',
   link = true,
-  classes = {}
+  classes = {},
 }: UserAvatarProps) => {
   const linkClassnames = classnames(styles.issueUser, {
     [styles.vertical]: orientation === 'vertical',
-    [styles.horizontal]: orientation === 'horizontal'
+    [styles.horizontal]: orientation === 'horizontal',
   })
 
   const avatarClassnames = classnames(styles.avatar, classes.avatar)
diff --git a/src/features/issueDetails/IssueComments.tsx b/src/features/issueDetails/IssueComments.tsx
index 3ad67ce..f0c5323 100644
--- a/src/features/issueDetails/IssueComments.tsx
+++ b/src/features/issueDetails/IssueComments.tsx
@@ -2,15 +2,11 @@ import React from 'react'
 import ReactMarkdown from 'react-markdown'
 
 import { insertMentionLinks } from 'utils/stringUtils'
-import { Issue, Comment } from 'api/githubAPI'
+import { Comment } from 'api/githubAPI'
 import { UserWithAvatar } from 'components/UserWithAvatar'
 
 import styles from './IssueComments.module.css'
-
-interface ICLProps {
-  issue: Issue
-  comments: Comment[]
-}
+import { useIssueComments } from 'state'
 
 interface ICProps {
   comment: Comment
@@ -35,23 +31,11 @@ function IssueComment({ comment }: ICProps) {
   )
 }
 
-export function IssueComments({ comments = [], issue }: ICLProps) {
-  // The issue has no comments
-  if (issue.comments === 0) {
-    return <div className="issue-detail--no-comments">No comments</div>
-  }
-
-  // The issue has comments, but they're not loaded yet
-  if (!comments || comments.length === 0) {
-    return (
-      <div className="issue-detail--comments-loading">Comments loading...</div>
-    )
-  }
-
-  // Comments are loaded
+export const IssueComments: React.FC = () => {
+  const comments = useIssueComments()
   return (
     <ul className={styles.commentsList}>
-      {comments.map(comment => (
+      {comments.map((comment) => (
         <li key={comment.id}>
           <IssueComment comment={comment} />
         </li>
diff --git a/src/features/issueDetails/IssueDetailsPage.tsx b/src/features/issueDetails/IssueDetailsPage.tsx
index 7cafbef..646d4ae 100644
--- a/src/features/issueDetails/IssueDetailsPage.tsx
+++ b/src/features/issueDetails/IssueDetailsPage.tsx
@@ -1,9 +1,8 @@
-import React, { useState, useEffect } from 'react'
+import React, { Suspense } from 'react'
 import ReactMarkdown from 'react-markdown'
 import classnames from 'classnames'
 
 import { insertMentionLinks } from 'utils/stringUtils'
-import { getIssue, getComments, Issue, Comment } from 'api/githubAPI'
 import { IssueLabels } from 'components/IssueLabels'
 
 import { IssueMeta } from './IssueMeta'
@@ -11,95 +10,86 @@ import { IssueComments } from './IssueComments'
 
 import styles from './IssueDetailsPage.module.css'
 import './IssueDetailsPage.css'
+import { ErrorBoundary, FallbackProps } from 'react-error-boundary'
+import { onIssueUnselecteed, useIssue, useSelectedIssueId } from 'state'
 
-interface IDProps {
-  org: string
-  repo: string
-  issueId: number
-  showIssuesList: () => void
-}
-
-export const IssueDetailsPage = ({
-  org,
-  repo,
-  issueId,
-  showIssuesList
-}: IDProps) => {
-  const [issue, setIssue] = useState<Issue | null>(null)
-  const [comments, setComments] = useState<Comment[]>([])
-  const [commentsError, setCommentsError] = useState<Error | null>(null)
-
-  useEffect(() => {
-    async function fetchIssue() {
-      try {
-        setCommentsError(null)
-        const issue = await getIssue(org, repo, issueId)
-        setIssue(issue)
-      } catch (err) {
-        setCommentsError(err)
+const Comments: React.FC = () => {
+  const { comments } = useIssue()
+  return comments === 0 ? (
+    <div className="issue-detail--no-comments">No comments</div>
+  ) : (
+    <Suspense
+      fallback={
+        <div className="issue-detail--comments-loading">Coments loading...</div>
       }
-    }
-
-    fetchIssue()
-  }, [org, repo, issueId])
-
-  useEffect(() => {
-    async function fetchComments() {
-      if (issue !== null) {
-        const comments = await getComments(issue.comments_url)
-        setComments(comments)
-      }
-    }
-
-    fetchComments()
-  }, [issue])
+    >
+      <IssueComments />
+    </Suspense>
+  )
+}
 
-  let content
+const BackButton = () => (
+  <button className="pure-button" onClick={onIssueUnselecteed}>
+    Back to Issues List
+  </button>
+)
 
-  const backToIssueListButton = (
-    <button className="pure-button" onClick={showIssuesList}>
-      Back to Issues List
-    </button>
+const IssueDetails: React.FC = () => {
+  const issue = useIssue()
+  return (
+    <div className={classnames('issueDetailsPage', styles.issueDetailsPage)}>
+      <h1 className="issue-detail__title">{issue.title}</h1>
+      <BackButton />
+      <IssueMeta issue={issue} />
+      <IssueLabels labels={issue.labels} className={styles.issueLabels} />
+      <hr className={styles.divider} />
+      <div className={styles.summary}>
+        <ReactMarkdown
+          className={'testing'}
+          source={insertMentionLinks(issue.body)}
+        />
+      </div>
+      <hr className={styles.divider} />
+    </div>
   )
+}
 
-  if (commentsError) {
-    return (
-      <div className="issue-detail--error">
-        {backToIssueListButton}
-        <h1>There was a problem loading issue #{issueId}</h1>
-        <p>{commentsError.toString()}</p>
-      </div>
-    )
-  }
+const Loading: React.FC = ({ children }) => (
+  <div className="issue-detail--loading">
+    <BackButton />
+    {children}
+  </div>
+)
 
-  if (issue === null) {
-    content = (
-      <div className="issue-detail--loading">
-        {backToIssueListButton}
-        <p>Loading issue #{issueId}...</p>
-      </div>
-    )
-  } else {
-    let renderedComments = <IssueComments issue={issue} comments={comments} />
+const IssueError: React.FC<FallbackProps> = ({ error }) => (
+  <Loading>
+    <p>Something went wrong...</p>
+    <p>{error!.message}</p>
+  </Loading>
+)
 
-    content = (
-      <div className={classnames('issueDetailsPage', styles.issueDetailsPage)}>
-        <h1 className="issue-detail__title">{issue.title}</h1>
-        {backToIssueListButton}
-        <IssueMeta issue={issue} />
-        <IssueLabels labels={issue.labels} className={styles.issueLabels} />
-        <hr className={styles.divider} />
-        <div className={styles.summary}>
-          <ReactMarkdown
-            className={'testing'}
-            source={insertMentionLinks(issue.body)}
-          />
-        </div>
-        <hr className={styles.divider} />
-        <ul>{renderedComments}</ul>
-      </div>
-    )
-  }
+const Issue: React.FC<{ id: number }> = ({ id }) => {
+  return (
+    <div>
+      <ErrorBoundary FallbackComponent={IssueError}>
+        <Suspense
+          fallback={
+            <Loading>
+              <p>Loading issue #{id}...</p>
+            </Loading>
+          }
+        >
+          <IssueDetails />
+          <Comments />
+        </Suspense>
+      </ErrorBoundary>
+    </div>
+  )
+}
 
-  return <div>{content}</div>
+const IssueDetailsPage: React.FC = () => {
+  const id = useSelectedIssueId()
+  return id === null ? null : <Issue id={id} />
 }
+
+export default IssueDetailsPage
diff --git a/src/features/issueDetails/IssueMeta.tsx b/src/features/issueDetails/IssueMeta.tsx
index 105dd9a..ba83abe 100644
--- a/src/features/issueDetails/IssueMeta.tsx
+++ b/src/features/issueDetails/IssueMeta.tsx
@@ -13,7 +13,7 @@ interface IssueProps {
 const IssueState = ({ issue: { state } }: IssueProps) => (
   <span
     className={classnames('issue-detail__state', styles.issueState, {
-      [styles.open]: state === 'open'
+      [styles.open]: state === 'open',
     })}
   >
     {state}
diff --git a/src/features/issuesList/IssueListItem.tsx b/src/features/issuesList/IssueListItem.tsx
index 91722c4..17d1a3a 100644
--- a/src/features/issuesList/IssueListItem.tsx
+++ b/src/features/issuesList/IssueListItem.tsx
@@ -7,10 +7,7 @@ import { IssueLabels } from 'components/IssueLabels'
 import { UserWithAvatar } from 'components/UserWithAvatar'
 
 import styles from './IssueListItem.module.css'
-
-type Props = Issue & {
-  showIssueComments: (issueId: number) => void
-}
+import { onIssueSelected } from 'state'
 
 export const IssueListItem = ({
   number,
@@ -19,12 +16,11 @@ export const IssueListItem = ({
   user,
   comments,
   body = '',
-  showIssueComments
-}: Props) => {
+}: Issue) => {
   const onIssueClicked = (e: MouseEvent) => {
     e.preventDefault()
     e.stopPropagation()
-    showIssueComments(number)
+    onIssueSelected(number)
   }
 
   const pluralizedComments = comments === 1 ? 'comment' : 'comments'
diff --git a/src/features/issuesList/IssuePagination.tsx b/src/features/issuesList/IssuePagination.tsx
index 8441bca..0470ee4 100644
--- a/src/features/issuesList/IssuePagination.tsx
+++ b/src/features/issuesList/IssuePagination.tsx
@@ -1,34 +1,32 @@
-import React from 'react'
+import React, { Suspense } from 'react'
 import classnames from 'classnames'
-import Paginate, { ReactPaginateProps } from 'react-paginate'
+import Paginate from 'react-paginate'
 
 import styles from './IssuePagination.module.css'
 import './IssuePagination.css'
+import { useCurrentPage, useIssues, onPageChange } from 'state'
 
-export type OnPageChangeCallback = ReactPaginateProps['onPageChange']
+const IssuePaginationLoaded = () => {
+  const currentPage = useCurrentPage()
+  const { pageCount } = useIssues()
 
-interface Props {
-  currentPage: number
-  pageCount: number
-  onPageChange?: OnPageChangeCallback
-}
-
-export const IssuePagination = ({
-  currentPage,
-  pageCount,
-  onPageChange
-}: Props) => {
-  return (
+  return pageCount === 0 ? null : (
     <div className={classnames('issuesPagination', styles.pagination)}>
       <Paginate
-        forcePage={currentPage}
+        forcePage={currentPage - 1}
         pageCount={pageCount}
         marginPagesDisplayed={2}
         pageRangeDisplayed={5}
-        onPageChange={onPageChange}
+        onPageChange={({ selected }) => onPageChange(selected + 1)}
         nextLabel="&rarr;"
         previousLabel="&larr;"
       />
     </div>
   )
 }
+
+export const IssuePagination = () => (
+  <Suspense fallback={null}>
+    <IssuePaginationLoaded />
+  </Suspense>
+)
diff --git a/src/features/issuesList/IssuesList.tsx b/src/features/issuesList/IssuesList.tsx
index bd8d1d8..fd774cb 100644
--- a/src/features/issuesList/IssuesList.tsx
+++ b/src/features/issuesList/IssuesList.tsx
@@ -1,21 +1,23 @@
-import React from 'react'
+import React, { Suspense } from 'react'
 
-import { Issue } from 'api/githubAPI'
 import { IssueListItem } from './IssueListItem'
 
 import styles from './IssuesList.module.css'
+import { useIssues } from 'state'
 
-interface Props {
-  issues: Issue[]
-  showIssueComments: (issueId: number) => void
-}
-
-export const IssuesList = ({ issues, showIssueComments }: Props) => {
-  const renderedIssues = issues.map(issue => (
+const IssuesListLoaded = () => {
+  const { issues } = useIssues()
+  const renderedIssues = issues.map((issue) => (
     <li key={issue.id}>
-      <IssueListItem {...issue} showIssueComments={showIssueComments} />
+      <IssueListItem {...issue} />
     </li>
   ))
 
   return <ul className={styles.issuesList}>{renderedIssues}</ul>
 }
+
+export const IssuesList = () => (
+  <Suspense fallback={<div>Loading...</div>}>
+    <IssuesListLoaded />
+  </Suspense>
+)
diff --git a/src/features/issuesList/IssuesListPage.tsx b/src/features/issuesList/IssuesListPage.tsx
index dc491b1..7ab9344 100644
--- a/src/features/issuesList/IssuesListPage.tsx
+++ b/src/features/issuesList/IssuesListPage.tsx
@@ -1,96 +1,35 @@
-import React, { useState, useEffect } from 'react'
-
-import { getIssues, getRepoDetails, IssuesResult } from 'api/githubAPI'
+import React, { useEffect } from 'react'
+import { ErrorBoundary, FallbackProps } from 'react-error-boundary'
 
 import { IssuesPageHeader } from './IssuesPageHeader'
 import { IssuesList } from './IssuesList'
-import { IssuePagination, OnPageChangeCallback } from './IssuePagination'
-
-interface ILProps {
-  org: string
-  repo: string
-  page: number
-  setJumpToPage: (page: number) => void
-  showIssueComments: (issueId: number) => void
-}
-
-export const IssuesListPage = ({
-  org,
-  repo,
-  page = 1,
-  setJumpToPage,
-  showIssueComments
-}: ILProps) => {
-  const [issuesResult, setIssues] = useState<IssuesResult>({
-    pageLinks: null,
-    pageCount: 1,
-    issues: []
-  })
-  const [numIssues, setNumIssues] = useState<number>(-1)
-  const [isLoading, setIsLoading] = useState<boolean>(false)
-  const [issuesError, setIssuesError] = useState<Error | null>(null)
-
-  const { issues, pageCount } = issuesResult
+import { IssuePagination } from './IssuePagination'
+import { currentRepoAndPage$ } from 'state'
+import { skip, take } from 'rxjs/operators'
 
+const OnError: React.FC<FallbackProps> = ({ error, resetErrorBoundary }) => {
   useEffect(() => {
-    async function fetchEverything() {
-      async function fetchIssues() {
-        const issuesResult = await getIssues(org, repo, page)
-        setIssues(issuesResult)
-      }
-
-      async function fetchIssueCount() {
-        const repoDetails = await getRepoDetails(org, repo)
-        setNumIssues(repoDetails.open_issues_count)
-      }
-
-      try {
-        await Promise.all([fetchIssues(), fetchIssueCount()])
-        setIssuesError(null)
-      } catch (err) {
-        console.error(err)
-        setIssuesError(err)
-      } finally {
-        setIsLoading(false)
-      }
-    }
-
-    setIsLoading(true)
-
-    fetchEverything()
-  }, [org, repo, page])
-
-  if (issuesError) {
-    return (
-      <div>
-        <h1>Something went wrong...</h1>
-        <div>{issuesError.toString()}</div>
-      </div>
-    )
-  }
-
-  const currentPage = Math.min(pageCount, Math.max(page, 1)) - 1
-
-  let renderedList = isLoading ? (
-    <h3>Loading...</h3>
-  ) : (
-    <IssuesList issues={issues} showIssueComments={showIssueComments} />
+    const subscription = currentRepoAndPage$
+      .pipe(skip(1), take(1))
+      .subscribe(resetErrorBoundary)
+    return () => subscription.unsubscribe()
+  }, [resetErrorBoundary])
+  return (
+    <div>
+      <h1>Something went wrong...</h1>
+      <div>{error && error.message}</div>
+    </div>
   )
+}
 
-  const onPageChanged: OnPageChangeCallback = selectedItem => {
-    const newPage = selectedItem.selected + 1
-    setJumpToPage(newPage)
-  }
-
+export const IssuesListPage = () => {
   return (
-    <div id="issue-list-page">
-      <IssuesPageHeader openIssuesCount={numIssues} org={org} repo={repo} />
-      {renderedList}
-      <IssuePagination
-        currentPage={currentPage}
-        pageCount={pageCount}
-        onPageChange={onPageChanged}
-      />
-    </div>
+    <ErrorBoundary FallbackComponent={OnError}>
+      <div id="issue-list-page">
+        <IssuesPageHeader />
+        <IssuesList />
+        <IssuePagination />
+      </div>
+    </ErrorBoundary>
   )
 }
diff --git a/src/features/issuesList/IssuesPageHeader.tsx b/src/features/issuesList/IssuesPageHeader.tsx
index 61fe30a..96e9bb1 100644
--- a/src/features/issuesList/IssuesPageHeader.tsx
+++ b/src/features/issuesList/IssuesPageHeader.tsx
@@ -1,15 +1,8 @@
-import React from 'react'
+import React, { Suspense } from 'react'
+import { useCurrentRepoOpenIssuesCount, useCurrentRepo } from 'state'
 
-interface OrgProps {
-  org: string
-  repo: string
-}
-
-type HeaderProps = {
-  openIssuesCount: number
-} & OrgProps
-
-function OrgRepo({ org, repo }: OrgProps) {
+function OrgRepo() {
+  const { org, repo } = useCurrentRepo()
   return (
     <span>
       <a href={`https://github.com/${org}`} className="header__org">
@@ -23,24 +16,23 @@ function OrgRepo({ org, repo }: OrgProps) {
   )
 }
 
-export function IssuesPageHeader({
-  openIssuesCount = -1,
-  org,
-  repo
-}: HeaderProps) {
-  if (openIssuesCount === -1) {
-    return (
-      <h1>
-        Open issues for <OrgRepo org={org} repo={repo} />
-      </h1>
-    )
-  } else {
-    const pluralizedIssue = openIssuesCount === 1 ? 'issue' : 'issues'
-    return (
-      <h1>
-        <span className="header__openIssues">{openIssuesCount}</span> open{' '}
-        {pluralizedIssue} for <OrgRepo org={org} repo={repo} />
-      </h1>
-    )
-  }
+function OpenIssues() {
+  const openIssuesCount = useCurrentRepoOpenIssuesCount()
+  return (
+    <>
+      <span className="header__openIssues">{openIssuesCount}</span> open{' '}
+      {openIssuesCount === 1 ? 'issue' : 'issues'} for {}
+    </>
+  )
+}
+
+export function IssuesPageHeader() {
+  return (
+    <h1>
+      <Suspense fallback={'Open issues for '}>
+        <OpenIssues />
+      </Suspense>
+      <OrgRepo />
+    </h1>
+  )
 }
diff --git a/src/features/repoSearch/RepoSearchForm.tsx b/src/features/repoSearch/RepoSearchForm.tsx
index 90bdb85..f42ad45 100644
--- a/src/features/repoSearch/RepoSearchForm.tsx
+++ b/src/features/repoSearch/RepoSearchForm.tsx
@@ -1,51 +1,23 @@
-import React, { useState, ChangeEvent } from 'react'
-
+import React, { useState, useEffect } from 'react'
 import './pure-forms.css'
 import './pure-buttons.css'
+import {
+  useCurrentPage,
+  onLoadRepo,
+  onPageChange,
+  INITIAL_REPO,
+  INITIAL_ORG,
+} from 'state'
 
-interface Props {
-  org: string
-  repo: string
-  setOrgAndRepo: (org: string, repo: string) => void
-  setJumpToPage: (page: number) => void
-}
-
-type InputEvent = ChangeEvent<HTMLInputElement>
-type ChangeHandler = (e: InputEvent) => void
-
-export const RepoSearchForm = ({
-  org,
-  repo,
-  setOrgAndRepo,
-  setJumpToPage
-}: Props) => {
-  const [currentOrg, setCurrentOrg] = useState(org)
-  const [currentRepo, setCurrentRepo] = useState(repo)
-  const [currentPageText, setCurrentPageText] = useState('1')
-
-  const onOrgChanged: ChangeHandler = e => {
-    setCurrentOrg(e.target.value)
-  }
-
-  const onRepoChanged: ChangeHandler = e => {
-    setCurrentRepo(e.target.value)
-  }
-
-  const onCurrentPageChanged: ChangeHandler = e => {
-    setCurrentPageText(e.target.value)
-  }
+export const RepoSearchForm = () => {
+  const [currentOrg, setCurrentOrg] = useState(INITIAL_ORG)
+  const [currentRepo, setCurrentRepo] = useState(INITIAL_REPO)
 
-  const onLoadRepoClicked = () => {
-    setOrgAndRepo(currentOrg, currentRepo)
-  }
-
-  const onJumpToPageClicked = () => {
-    const newPage = parseInt(currentPageText)
-
-    if (newPage >= 1) {
-      setJumpToPage(newPage)
-    }
-  }
+  const page = useCurrentPage()
+  const [currentPageText, setCurrentPageText] = useState(page.toString(10))
+  useEffect(() => {
+    setCurrentPageText(page.toString(10))
+  }, [page])
 
   return (
     <form className="pure-form">
@@ -53,16 +25,24 @@ export const RepoSearchForm = ({
         <label htmlFor="org" style={{ marginRight: 5 }}>
           Org:
         </label>
-        <input name="org" value={currentOrg} onChange={onOrgChanged} />
+        <input
+          name="org"
+          value={currentOrg}
+          onChange={(e) => setCurrentOrg(e.target.value)}
+        />
         <label htmlFor="repo" style={{ marginRight: 5, marginLeft: 10 }}>
           Repo:
         </label>
-        <input name="repo" value={currentRepo} onChange={onRepoChanged} />
+        <input
+          name="repo"
+          value={currentRepo}
+          onChange={(e) => setCurrentRepo(e.target.value)}
+        />
         <button
           type="button"
           className="pure-button pure-button-primary"
           style={{ marginLeft: 5 }}
-          onClick={onLoadRepoClicked}
+          onClick={() => onLoadRepo(currentOrg, currentRepo)}
         >
           Load Repo
         </button>
@@ -74,13 +54,13 @@ export const RepoSearchForm = ({
         <input
           name="jumpToPage"
           value={currentPageText}
-          onChange={onCurrentPageChanged}
+          onChange={(e) => setCurrentPageText(e.target.value)}
         />
         <button
           type="button"
           className="pure-button pure-button-primary"
           style={{ marginLeft: 5 }}
-          onClick={onJumpToPageClicked}
+          onClick={() => onPageChange(Number(currentPageText))}
         >
           Jump to Page
         </button>
diff --git a/src/index.tsx b/src/index.tsx
index 5539ee7..54839f9 100644
--- a/src/index.tsx
+++ b/src/index.tsx
@@ -1,6 +1,16 @@
 import React from 'react'
 import ReactDOM from 'react-dom'
+
 import './index.css'
-import App from './app/App'
 
-ReactDOM.render(<App />, document.getElementById('root'))
+const render = () => {
+  const App = require('./app/App').default
+
+  ReactDOM.render(<App />, document.getElementById('root'))
+}
+
+render()
+
+if (process.env.NODE_ENV === 'development' && module.hot) {
+  module.hot.accept('./app/App', render)
+}
